{"version":3,"sources":["components/Card.js","components/CardList.js","components/robots.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","id","className","alt","height","width","src","CardList","robots","map","user","i","key","email","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchfield","target","value","filterRobot","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iOAceA,EAZF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,SAASC,EAAQ,EAARA,GAC5B,OACE,8BAAUC,UAAU,uDACpB,yBAAKC,IAAI,SAASC,OAAO,QAAQC,MAAM,QAAQC,IAAG,+BAA0BL,KAC1E,8BACE,4BAAKF,GACL,2BAAIC,MCcGO,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,kCAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdF,KAAMS,EAAOG,GAAGZ,KAChBC,SAAUQ,EAAOG,GAAGX,gBCbnBQ,EAAS,CACpB,CACEP,GAAI,EACJF,KAAM,SACNC,SAAU,cACVa,MAAO,wBAET,CACEZ,GAAI,EACJF,KAAM,UACNC,SAAU,YACVa,MAAO,sBAET,CACEZ,GAAI,EACJF,KAAM,QACNC,SAAU,gBACVa,MAAO,0BAET,CACEZ,GAAI,EACJF,KAAM,QACNC,SAAU,sBACVa,MAAO,gCAET,CACEZ,GAAI,EACJF,KAAM,UACNC,SAAU,cACVa,MAAO,wBAET,CACEZ,GAAI,EACJF,KAAM,SACNC,SAAU,cACVa,MAAO,wBAET,CACEZ,GAAI,EACJF,KAAM,QACNC,SAAU,eACVa,MAAO,yBAET,CACEZ,GAAI,EACJF,KAAM,OACNC,SAAU,iBACVa,MAAO,2BAET,CACEZ,GAAI,EACJF,KAAM,OACNC,SAAU,aACVa,MAAO,uBAET,CACEZ,GAAI,GACJF,KAAM,cACNC,SAAU,gBACVa,MAAO,4BC5CIC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,8BAAUb,UAAU,OACpB,2BACAA,UAAU,uCACVc,KAAK,SACLC,YAAY,oBACZC,SAAWH,MCYAI,G,kBAlBb,WAAaC,GAAQ,IAAD,8BAClB,4CAAOA,KACFC,MAAQ,CACXC,UAAU,GAHM,E,+EAOFC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAIG,KAAKJ,MAAMC,SACN,uDAEFG,KAAKL,MAAMO,a,GAfKC,cC4CZC,E,YArCb,aAAe,IAAD,8BACZ,+CASFC,eAAiB,SAACC,GAChB,EAAKL,SAAU,CAACM,YAAaD,EAAME,OAAOC,SAT1C,EAAKb,MAAQ,CAIXb,OAAQA,EACRwB,YAAa,IAPH,E,sEAaH,IAAD,EACsBP,KAAKJ,MAA5Bb,EADC,EACDA,OAAQwB,EADP,EACOA,YACTG,EAAc3B,EAAO4B,QAAO,SAAAC,GAChC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASP,EAAYM,kBAMvD,OACE,kCACE,0BAAMpC,UAAU,MAChB,2CACA,kBAAC,EAAD,CAAWa,aAAcU,KAAKK,iBAC9B,6BACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUtB,OAAS2B,W,GA9BTP,aCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.0ef30630.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, username,id}) => {\r\n  return (\r\n    <fragment className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n    <img alt='robots' height='200px' width='200px' src={`https://robohash.org/${id}`}/>\r\n      <main>\r\n        <h2>{name}</h2>\r\n        <p>{username}</p>\r\n      </main>\r\n    </fragment>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <fragment>\r\n        {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            username={robots[i].username}\r\n            />\r\n          )\r\n          })\r\n        }\r\n      </fragment>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Jesper',\r\n    username: 'Jakanboy177',\r\n    email: 'jakanboy177@april.tv'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Adelinn',\r\n    username: 'Addepadde',\r\n    email: 'addepadde@april.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Elena',\r\n    username: 'elenamittbena',\r\n    email: 'elenamittbena@april.tv'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Malin',\r\n    username: 'MalinTheInstagramer',\r\n    email: 'malintheinstagramer@april.tv'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Matilda',\r\n    username: 'MartiniGirl',\r\n    email: 'martinigirl@april.tv'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Emilia',\r\n    username: 'WeddingGirl',\r\n    email: 'weddinggirl@april.tv'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Erika',\r\n    username: 'businessGirl',\r\n    email: 'businessGirl@april.tv'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Anna',\r\n    username: 'AnnaTheTeacher',\r\n    email: 'annatheteacher@april.tv'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Emma',\r\n    username: 'CloudyEmma',\r\n    email: 'cloudyemma@april.tv'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Christoffer',\r\n    username: 'ChisTheHacker',\r\n    email: 'christhehacker@april.tv'\r\n  }\r\n]\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <fragment className='pa2'>\r\n    <input\r\n    className='pa3 ma3 ba b--green bg-lightest-blue'\r\n    type='search'\r\n    placeholder='Search for robots'\r\n    onChange= {searchChange}\r\n    />\r\n    </fragment>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({hasError: true})\r\n  }\r\n  render() {\r\n    if (this.state.hasError){\r\n      return <h1>Opps there is an error!</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport {robots} from '../components/robots.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry.js';\r\n\r\n// This is the app component\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      // The app has to states, robots and searchfield\r\n      //It is things that changes in the App\r\n      // depending on the input\r\n      robots: robots,\r\n      searchfield: ''\r\n    }\r\n  }\r\n  onSearchChange = (event) =>{\r\n    this.setState ({searchfield: event.target.value})\r\n  }\r\n  render () {\r\n    const {robots, searchfield} = this.state;\r\n    const filterRobot = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n    /*This is the DOM or VRDom, that you will see on the browser\r\n    A searchbox that update when the input event accures\r\n    The robotcards, filters robots when input event accures\r\n    */\r\n    return (\r\n      <fragment>\r\n        <main className='tc'>\r\n        <h1>Robofriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <br/>\r\n        <ErrorBoundry>\r\n        <CardList robots={ filterRobot}/>\r\n        </ErrorBoundry>\r\n        </main>\r\n      </fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}